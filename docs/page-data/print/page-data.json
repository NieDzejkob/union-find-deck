{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"d1234cc2-ca38-5902-ae88-5956216d6905","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Union-Find\"), mdx(\"p\", null, \"Sk\\u0142adowe sp\\xF3jne w zmieniaj\\u0105cym si\\u0119 grafie.\"), mdx(\"hr\", null), mdx(Animation, {\n    graph: makeGraph([[1, 2], [2, 3], [1, 5], [2, 5], [3, 4], [4, 5], [4, 6], [3, 9, 'shadow'], [9, 8], [8, 7], [4, 7, ['shadow', 'long']]]),\n    steps: function steps(g) {\n      return [// Weźmy sobie jakiś graf\n      ['reset'], // Chcemy wiedzieć, czy między dwoma węzłami istnieje ścieżka. Na przykład,\n      // jeśli weźmiemy 1 i 6,\n      ['add', [['green', 1], ['green', 6]]], // to możemy przejść między nimi, przez 4 i 5\n      ['add', [['blue', 1, 5], ['blue', 5]], [['blue', 5, 4], ['blue', 4]], [['blue', 4, 6]]], // Lecz jeśli weźmiemy sobie 6 i 9, to nie ma między nimi ścieżki.\n      ['reset', [['red', 6], ['red', 9]]], // Jak możemy odpowiedzieć na to pytanie?\n      ['reset'], // Moglibyśmy zrobić tak, że weźmiemy jeden z końców...\n      ['add', [['green', 1]]], // i puścimy wyszukiwanie, w głąb lub wszerz, nie ma znaczania\n      ['add'].concat(animateLayers(g, 1, 'blue', 3, 'green')), // Takie podejście będzie miało złożoność n + k, gdzie n to liczba wierzchołków,\n      // k to liczba krawędzi, z tym że każde zapytanie\n      // zaczynamy od zera, więc pomnożymy to jeszcze przez q.\n      ['setComment', 'O(q(n + k))'], // Możemy to zrobić lepiej - weźmy puśćmy wyszukiwanie z każdego wierzchołka po kolei,\n      // i ponumerujmy spójne składowe.\n      ['reset', [['blue', 1]]].concat(animateLayers(g, 1, 'blue')), ['add', [['orange', 7]]].concat(animateLayers(g, 7, 'orange')), // Teraz jak dostaniemy jakąś parę wierzchołków do sprawdzenia, to wystarczy\n      // sprawdzić czy są w tej samej spójnej składowej - na rysunku,\n      // czy są tego samego koloru.\n      //\n      // Jaka jest złożoność tego rozwiązania? Jak jakiś wierzchołek już jest pokolorowany,\n      // to nie musimy z niego puszczać kolejnego przeszukiwania, więc przygotowania zajmą\n      // nam O(n + k), po czym na każde zapytanie odpowiemy w czasie stałym.\n      ['setComment', 'O(n + k + q)'], // Takie podejście ma taką wadę, że naszego grafu nie możemy za bardzo zmieniać.\n      ['reset'], // Struktura danych Union-Find odpowiada na to samo pytanie,\n      // ale pozwala nam na szybkie dodanie krawędzi do grafu.\n      ['reset', [['white', 3, 9, 'dashed']]], // Union-Find przypisuje każdej spójnej składowej pewnego reprezentanta.\n      // Jest to po prostu wyróżniony wierzchołek grafu.\n      ['reset', [['blue', 4], ['blue', 8]]], ['setComment', \"Find\\nO(log n)\", 'add', [['orange', 2], ['orange', 2, 4, 'arrow'], ['orange', 1], ['orange', 1, 4, 'arrow'], ['orange', 3], ['orange', 3, 4, 'arrow'], ['orange', 7], ['orange', 7, 8, 'arrow']]], ['setComment', 'Union\\nO(log n)', 'replace', [['red', 3, 9]]], ['add', [['white', 8]]]];\n    },\n    mdxType: \"Animation\"\n  }), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, mdx(\"div\", {\n    style: {\n      display: \"block\",\n      height: \"100%\",\n      width: \"50%\"\n    }\n  }, mdx(Animation, {\n    graph: makeGraph([[1, 2], [2, 3], [1, 5], [2, 5], [3, 4], [4, 5], [4, 6], [3, 9, 'shadow'], [9, 8], [8, 7], [4, 7, ['shadow', 'long']]]),\n    steps: function steps(g) {\n      return [['reset'], ['reset', [['blue', 4], ['blue', 8]]], ['add'], ['setComment', \"Find\\xA0\\xA0\\xA0\", 'add', [['orange', 2], ['orange', 2, 4, 'arrow']]], ['setComment', \"Union\\xA0\\xA0\\xA0\", 'replace', [['red', 3, 9]]], ['add', [['orange', 3], ['orange', 3, 4, 'arrow'], ['orange', 9], ['orange', 9, 8, 'arrow']]], ['add', [['white', 8]]]];\n    },\n    mdxType: \"Animation\"\n  })), mdx(\"div\", {\n    style: {\n      display: \"block\",\n      height: \"100%\",\n      width: \"50%\",\n      background: \"#f6f8fa\"\n    }\n  }, mdx(Animation, {\n    color: \"black\",\n    directed: true,\n    graph: makeGraph([[1, 4], [5, 4], [6, 4], [2, 6], [3, 5], [7, 8], [9, 8], [8, 4, ['shadow', 'long']]], [4, 8]),\n    steps: function steps(g) {\n      return [['reset'], ['reset', [['blue', 4], ['blue', 8]]], ['add', [['black', 4, 4, 'arrow'], ['black', 8, 8, 'arrow']]], ['add', [['orange', 2], ['orange', 2, 6, 'arrow']], [['orange', 6], ['orange', 6, 4, 'arrow']]], ['replace'], ['add', [['orange', 3], ['orange', 3, 5, 'arrow'], ['orange', 9], ['orange', 9, 8, 'arrow']], [['orange', 5], ['orange', 5, 4, 'arrow']]], ['reset', [['red', 8, 4, 'arrow'], ['blue', 4], ['blue', 8], ['black', 4, 4, 'arrow'], ['black', 8], ['orange', 3], ['orange', 3, 5, 'arrow'], ['orange', 9], ['orange', 9, 8, 'arrow'], ['orange', 5], ['orange', 5, 4, 'arrow']]]];\n    },\n    mdxType: \"Animation\"\n  }))), mdx(\"hr\", null), mdx(Animation, {\n    directed: true,\n    graph: makeGraph([[2, 1], [3, 1], [6, 2], [5, 2], [4, 2], [8, 3], [7, 3], [10, 4], [9, 4], [11, 5], [12, 5], [14, 6], [13, 6], [17, 8], [18, 8], [15, 7], [16, 7]], [1], 0.6),\n    steps: function steps(g) {\n      return [['reset', [['white', 1, 1, 'arrow']]], ['add', [['red', 2]]], ['add', highlightSubtree(g, 2, 4, 'orange'), highlightSubtree(g, 2, 5, 'yellow'), highlightSubtree(g, 2, 6, 'green')]];\n    },\n    mdxType: \"Animation\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\",\n    \"metastring\": \"file=\\\"find-union-impl.cpp\\\"\",\n    \"file\": \"\\\"find-union-impl.cpp\\\"\"\n  }), \"#include <iostream>\\nusing namespace std;\\n\\nconst int MAX_N = 200000;\\nint N, M;\\nint size[MAX_N];\\nint parent[MAX_N];\\n\\nint find(int a) {\\n    while (parent[a] != a) {\\n        a = parent[a];\\n    }\\n\\n    return a;\\n}\\n\\nvoid merge(int a, int b) {\\n    a = find(a); b = find(b);\\n    if (a == b) return;\\n    if (size[a] < size[b])\\n        swap(a, b);\\n    parent[b] = a;\\n    size[a] += size[b];\\n}\\n\\nint main() {\\n    ios::sync_with_stdio(false); cin.tie();\\n    cin >> N >> M;\\n\\n    for (int i = 0; i < N; i++) {\\n        parent[i] = i;\\n        size[i] = 1;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4,6:7\",\n    \"4,6:7\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\",\n    \"metastring\": \"6,7\",\n    \"6,7\": true\n  }), \"#include <iostream>\\nusing namespace std;\\n\\nconst int MAX_N = 200000;\\nint N, M;\\n// warto\\u015Bci poprawne tylko dla reprezentant\\xF3w\\nint size[MAX_N];\\nint parent[MAX_N];\\n\\nint find(int a) {\\n    while (parent[a] != a) {\\n        a = parent[a];\\n    }\\n\\n    return a;\\n}\\n\\nvoid merge(int a, int b) {\\n    a = find(a); b = find(b);\\n    if (a == b) return;\\n    if (size[a] < size[b])\\n        swap(a, b);\\n    parent[b] = a;\\n    size[a] += size[b];\\n}\\n\\nint main() {\\n    ios::sync_with_stdio(false); cin.tie();\\n    cin >> N >> M;\\n\\n    for (int i = 0; i < N; i++) {\\n        parent[i] = i;\\n        size[i] = 1;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"31:34\",\n    \"31:34\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"32\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"32\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"33\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"33\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:16\",\n    \"10:16\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"12\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11[12:25]\",\n    \"11[12:25]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"18:25\",\n    \"18:25\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"19\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"20\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"20\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"21:22\",\n    \"21:22\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"23\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"23\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"24\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"24\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"20:22,24\",\n    \"20:22,24\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(\"hr\", null), mdx(Animation, {\n    graph: makeGraph([[1, 2], [2, 3], [1, 5], [2, 5], [3, 4], [4, 5], [4, 6], [3, 9, 'shadow'], [9, 8], [8, 7], [4, 7, ['shadow', 'long']]]),\n    steps: function steps(g) {\n      return [['reset'], ['add', [['convexHull', 1, 2, 3, 4, 5, 6], ['convexHull', 7, 8, 9]], hideAllEdges(g)]];\n    },\n    mdxType: \"Animation\"\n  }), mdx(\"hr\", null), mdx(Animation, {\n    directed: true,\n    graph: makeGraph([[2, 1], [3, 1], [6, 2], [5, 2], [4, 2], [8, 3], [7, 3], [10, 4], [9, 4], [11, 5], [12, 5], [14, 6], [13, 6], [17, 8], [18, 8], [15, 7], [16, 7]], [1], 0.6),\n    steps: function steps(g) {\n      return [['reset', [['white', 1, 1, 'arrow']]], ['add', [['orange', 14], ['orange', 14, 6, 'arrow']], [['orange', 6], ['orange', 6, 2, 'arrow']], [['orange', 2], ['orange', 2, 1, 'arrow']], [['blue', 1]]], ['replace', [['orange', 14], ['orange', 14, 1, 'arrow'], ['orange', 6], ['orange', 6, 1, 'arrow'], ['orange', 2], ['orange', 2, 1, 'arrow'], ['blue', 1], ['hide', 14, 6], ['hide', 6, 2]]], ['setComment', 'O(α(n))'], ['setComment', '≈ O(1)']];\n    },\n    mdxType: \"Animation\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\",\n    \"metastring\": \"9:15 file=\\\"find-union-impl.cpp\\\"\",\n    \"9:15\": true,\n    \"file\": \"\\\"find-union-impl.cpp\\\"\"\n  }), \"#include <iostream>\\nusing namespace std;\\n\\nconst int MAX_N = 200000;\\nint N, M;\\nint size[MAX_N];\\nint parent[MAX_N];\\n\\nint find(int a) {\\n    while (parent[a] != a) {\\n        a = parent[a];\\n    }\\n\\n    return a;\\n}\\n\\nvoid merge(int a, int b) {\\n    a = find(a); b = find(b);\\n    if (a == b) return;\\n    if (size[a] < size[b])\\n        swap(a, b);\\n    parent[b] = a;\\n    size[a] += size[b];\\n}\\n\\nint main() {\\n    ios::sync_with_stdio(false); cin.tie();\\n    cin >> N >> M;\\n\\n    for (int i = 0; i < N; i++) {\\n        parent[i] = i;\\n        size[i] = 1;\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\nusing namespace std;\\n\\nconst int MAX_N = 200000;\\nint N, M;\\nint size[MAX_N];\\nint parent[MAX_N];\\n\\nint find(int a) {\\n    if (parent[a] != a) {\\n        parent[a] = find(parent[a]);\\n    }\\n\\n    return parent[a];\\n}\\n\\nvoid merge(int a, int b) {\\n    a = find(a); b = find(b);\\n    if (a == b) return;\\n    if (size[a] < size[b])\\n        swap(a, b);\\n    parent[b] = a;\\n    size[a] += size[b];\\n}\\n\\nint main() {\\n    ios::sync_with_stdio(false); cin.tie();\\n    cin >> N >> M;\\n\\n    for (int i = 0; i < N; i++) {\\n        parent[i] = i;\\n        size[i] = 1;\\n    }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Czas na zadanie\"), mdx(\"h2\", null, \"2137.pl/wXJYbN\"), mdx(\"hr\", null), mdx(Animation, {\n    graph: makeGraph([[1, 2], [2, 3], [1, 5], [2, 5], [3, 4], [4, 5], [4, 6], [3, 9, 'shadow'], [9, 8], [8, 7], [4, 7, ['shadow', 'long']]]),\n    steps: function steps(g) {\n      return [['setComment', mdx(\"tspan\", {\n        style: {\n          fontSize: 20,\n          fill: \"#9cdcfe\"\n        }\n      }, \"2137.pl/wXJYbN\\xA0\")], ['add', [['hide', 8], ['hide', 9, 8], ['hide', 8, 7]]], ['add', [['hide', 7]]], ['add', [['hide', 9]]], ['add', [['hide', 4], ['hide', 4, 6], ['hide', 3, 4], ['hide', 4, 5]]], ['add', [['hide', 6]]], ['add', [['hide', 2], ['hide', 1, 2], ['hide', 2, 3], ['hide', 2, 5]]], ['add', [['hide', 3]]], ['add', [['hide', 5], ['hide', 1, 5]]], ['add', [['hide', 1]]]];\n    },\n    mdxType: \"Animation\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Closing the farm\"), mdx(\"h2\", null, \"2137.pl/wXJYbN\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d1234cc2-ca38-5902-ae88-5956216d6905","slug":"/union-find-deck","title":"Union-Find"}},"staticQueryHashes":[]}